type Upgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ItemListed @entity {
  id: ID!
  nftAddress: Bytes! # Address of the NFT
  tokenId: BigInt! # Token ID of the NFT
  seller: Bytes! # Address of the seller
  price: BigInt! # Price of the listing
  itemTokenIds: [BigInt!]! # Array of item token IDs
  itemType: String! # Type of the item
  power: BigInt! # Power of the item
  durability: BigInt! # Durability of the item
  characterOwner: String! # Character owner of the item
  imageUrl: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type ListingCancelled @entity {
  id: ID!
  nftAddress: Bytes! # Address of the NFT
  tokenId: BigInt! # Token ID of the NFT
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type PriceChanged @entity {
  id: ID!
  nftAddress: Bytes! # Address of the NFT
  tokenId: BigInt! # Token ID of the NFT
  newPrice: BigInt! # New price after the change
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type ItemBought @entity {
  id: ID!
  nftAddress: Bytes! # Address of the NFT
  tokenId: BigInt! # Token ID of the NFT
  buyer: Bytes! # Address of the buyer
  price: BigInt! # Price at which the item was bought
  itemType: String! # Type of the item
  power: BigInt! # Power of the item
  durability: BigInt! # Durability of the item
  characterOwner: String! # Character owner of the item
  imageUrl: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type DungeonResult @entity {
  id: ID!
  player: Bytes! # Assuming player is an address
  dungeonTime: String!
  characterCreationDate: String!
  dungeonDay: String!
  characterId: BigInt!
  totalLootReward: BigInt!
  totalExperiences: BigInt!
  totalSuccess: BigInt!
  totalAttempts: BigInt!
  name: String!
  imageURI: String!
  itemPower: BigInt!
}

type Character @entity {
  id: ID!
  user: Bytes!
  tokenId: BigInt!
  name: String!
  imageURI: String!
  avatarType: String!
  itemSlots: BigInt!
  openSlots: [BigInt!]
  registrationDate: BigInt!
  experience: BigInt!
}

type ExperienceUpdate @entity {
  id: ID!
  tokenId: BigInt!
  totalExperience: BigInt!
  # For ExperienceUpdatedWithSlot event
  lastAddedSlot: BigInt
}

type ItemOwnershipChange @entity {
  id: ID!
  tokenId: BigInt!
  newOwner: Bytes!
  # Additional fields as needed
}

type Box @entity {
  id: ID!
  user: Bytes!
  tokenId: BigInt!
  mintedAt: BigInt!
}

type Item @entity {
  id: ID!
  user: Bytes!
  tokenId: BigInt!
  metadata: String!
  mintedAt: BigInt!
}

type ForgeProcessed @entity {
  id: ID!
  user: Bytes!
  itemId: BigInt!
  uri: String!
  successPercentage: BigInt!
  random: BigInt!
  mintedAt: BigInt!
}



