// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BatchMetadataUpdate extends ethereum.Event {
  get params(): BatchMetadataUpdate__Params {
    return new BatchMetadataUpdate__Params(this);
  }
}

export class BatchMetadataUpdate__Params {
  _event: BatchMetadataUpdate;

  constructor(event: BatchMetadataUpdate) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CharacterMinted extends ethereum.Event {
  get params(): CharacterMinted__Params {
    return new CharacterMinted__Params(this);
  }
}

export class CharacterMinted__Params {
  _event: CharacterMinted;

  constructor(event: CharacterMinted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get imageURI(): string {
    return this._event.parameters[3].value.toString();
  }

  get avatarType(): string {
    return this._event.parameters[4].value.toString();
  }

  get itemSlots(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get registrationDate(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ExperienceUpdated extends ethereum.Event {
  get params(): ExperienceUpdated__Params {
    return new ExperienceUpdated__Params(this);
  }
}

export class ExperienceUpdated__Params {
  _event: ExperienceUpdated;

  constructor(event: ExperienceUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalExperience(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ExperienceUpdatedWithSlot extends ethereum.Event {
  get params(): ExperienceUpdatedWithSlot__Params {
    return new ExperienceUpdatedWithSlot__Params(this);
  }
}

export class ExperienceUpdatedWithSlot__Params {
  _event: ExperienceUpdatedWithSlot;

  constructor(event: ExperienceUpdatedWithSlot) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalExperience(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lastAddedSlot(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MetadataUpdate extends ethereum.Event {
  get params(): MetadataUpdate__Params {
    return new MetadataUpdate__Params(this);
  }
}

export class MetadataUpdate__Params {
  _event: MetadataUpdate;

  constructor(event: MetadataUpdate) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CreateCharacter__getCharacterMetadataResult {
  value0: string;
  value1: string;
  value2: BigInt;
  value3: Array<BigInt>;
  value4: BigInt;

  constructor(
    value0: string,
    value1: string,
    value2: BigInt,
    value3: Array<BigInt>,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getValue0(): string {
    return this.value0;
  }

  getValue1(): string {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): Array<BigInt> {
    return this.value3;
  }

  getValue4(): BigInt {
    return this.value4;
  }
}

export class CreateCharacter__getCharactersByOwnerResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }

  get avatarType(): string {
    return this[3].toString();
  }

  get experience(): BigInt {
    return this[4].toBigInt();
  }

  get openSlots(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get energy(): BigInt {
    return this[6].toBigInt();
  }

  get lastEnergyUpdateTime(): BigInt {
    return this[7].toBigInt();
  }
}

export class CreateCharacter__mintCharacterInputParamsStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get name(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }

  get avatarType(): string {
    return this[3].toString();
  }

  get tokenAmount(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }

  get timestamp(): BigInt {
    return this[6].toBigInt();
  }
}

export class CreateCharacter extends ethereum.SmartContract {
  static bind(address: Address): CreateCharacter {
    return new CreateCharacter("CreateCharacter", address);
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dungeonAdventure(): Address {
    let result = super.call(
      "dungeonAdventure",
      "dungeonAdventure():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_dungeonAdventure(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dungeonAdventure",
      "dungeonAdventure():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gameTreasury(): Address {
    let result = super.call("gameTreasury", "gameTreasury():(address)", []);

    return result[0].toAddress();
  }

  try_gameTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("gameTreasury", "gameTreasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCharacterExp(tokenId: BigInt): BigInt {
    let result = super.call(
      "getCharacterExp",
      "getCharacterExp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toBigInt();
  }

  try_getCharacterExp(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCharacterExp",
      "getCharacterExp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCharacterMetadata(
    tokenId: BigInt,
  ): CreateCharacter__getCharacterMetadataResult {
    let result = super.call(
      "getCharacterMetadata",
      "getCharacterMetadata(uint256):(string,string,uint256,uint256[],uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return new CreateCharacter__getCharacterMetadataResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigIntArray(),
      result[4].toBigInt(),
    );
  }

  try_getCharacterMetadata(
    tokenId: BigInt,
  ): ethereum.CallResult<CreateCharacter__getCharacterMetadataResult> {
    let result = super.tryCall(
      "getCharacterMetadata",
      "getCharacterMetadata(uint256):(string,string,uint256,uint256[],uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CreateCharacter__getCharacterMetadataResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigIntArray(),
        value[4].toBigInt(),
      ),
    );
  }

  getCharactersByOwner(
    owner: Address,
  ): Array<CreateCharacter__getCharactersByOwnerResultValue0Struct> {
    let result = super.call(
      "getCharactersByOwner",
      "getCharactersByOwner(address):((uint256,string,string,string,uint256,uint256[],uint256,uint256)[])",
      [ethereum.Value.fromAddress(owner)],
    );

    return result[0].toTupleArray<CreateCharacter__getCharactersByOwnerResultValue0Struct>();
  }

  try_getCharactersByOwner(
    owner: Address,
  ): ethereum.CallResult<
    Array<CreateCharacter__getCharactersByOwnerResultValue0Struct>
  > {
    let result = super.tryCall(
      "getCharactersByOwner",
      "getCharactersByOwner(address):((uint256,string,string,string,uint256,uint256[],uint256,uint256)[])",
      [ethereum.Value.fromAddress(owner)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<CreateCharacter__getCharactersByOwnerResultValue0Struct>(),
    );
  }

  getRegistrationDate(tokenId: BigInt): BigInt {
    let result = super.call(
      "getRegistrationDate",
      "getRegistrationDate(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toBigInt();
  }

  try_getRegistrationDate(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRegistrationDate",
      "getRegistrationDate(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTypeCount(_type: string): BigInt {
    let result = super.call("getTypeCount", "getTypeCount(string):(uint256)", [
      ethereum.Value.fromString(_type),
    ]);

    return result[0].toBigInt();
  }

  try_getTypeCount(_type: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTypeCount",
      "getTypeCount(string):(uint256)",
      [ethereum.Value.fromString(_type)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintCharacter(
    params: CreateCharacter__mintCharacterInputParamsStruct,
  ): BigInt {
    let result = super.call(
      "mintCharacter",
      "mintCharacter((address,string,string,string,uint256,bytes,uint256)):(uint256)",
      [ethereum.Value.fromTuple(params)],
    );

    return result[0].toBigInt();
  }

  try_mintCharacter(
    params: CreateCharacter__mintCharacterInputParamsStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintCharacter",
      "mintCharacter((address,string,string,string,uint256,bytes,uint256)):(uint256)",
      [ethereum.Value.fromTuple(params)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paymentToken(): Address {
    let result = super.call("paymentToken", "paymentToken():(address)", []);

    return result[0].toAddress();
  }

  try_paymentToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("paymentToken", "paymentToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCharacterForRewardCall extends ethereum.Call {
  get inputs(): BurnCharacterForRewardCall__Inputs {
    return new BurnCharacterForRewardCall__Inputs(this);
  }

  get outputs(): BurnCharacterForRewardCall__Outputs {
    return new BurnCharacterForRewardCall__Outputs(this);
  }
}

export class BurnCharacterForRewardCall__Inputs {
  _call: BurnCharacterForRewardCall;

  constructor(call: BurnCharacterForRewardCall) {
    this._call = call;
  }

  get params(): BurnCharacterForRewardCallParamsStruct {
    return changetype<BurnCharacterForRewardCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class BurnCharacterForRewardCall__Outputs {
  _call: BurnCharacterForRewardCall;

  constructor(call: BurnCharacterForRewardCall) {
    this._call = call;
  }
}

export class BurnCharacterForRewardCallParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get rewardAmount(): BigInt {
    return this[1].toBigInt();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gameTreasuryAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _authorizedSinger(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _dungeonAdventureAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _paymentToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCharacterCall extends ethereum.Call {
  get inputs(): MintCharacterCall__Inputs {
    return new MintCharacterCall__Inputs(this);
  }

  get outputs(): MintCharacterCall__Outputs {
    return new MintCharacterCall__Outputs(this);
  }
}

export class MintCharacterCall__Inputs {
  _call: MintCharacterCall;

  constructor(call: MintCharacterCall) {
    this._call = call;
  }

  get params(): MintCharacterCallParamsStruct {
    return changetype<MintCharacterCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class MintCharacterCall__Outputs {
  _call: MintCharacterCall;

  constructor(call: MintCharacterCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCharacterCallParamsStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get name(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }

  get avatarType(): string {
    return this[3].toString();
  }

  get tokenAmount(): BigInt {
    return this[4].toBigInt();
  }

  get signature(): Bytes {
    return this[5].toBytes();
  }

  get timestamp(): BigInt {
    return this[6].toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeMintCall extends ethereum.Call {
  get inputs(): SafeMintCall__Inputs {
    return new SafeMintCall__Inputs(this);
  }

  get outputs(): SafeMintCall__Outputs {
    return new SafeMintCall__Outputs(this);
  }
}

export class SafeMintCall__Inputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get uri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SafeMintCall__Outputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetAuthorizedSignerCall extends ethereum.Call {
  get inputs(): SetAuthorizedSignerCall__Inputs {
    return new SetAuthorizedSignerCall__Inputs(this);
  }

  get outputs(): SetAuthorizedSignerCall__Outputs {
    return new SetAuthorizedSignerCall__Outputs(this);
  }
}

export class SetAuthorizedSignerCall__Inputs {
  _call: SetAuthorizedSignerCall;

  constructor(call: SetAuthorizedSignerCall) {
    this._call = call;
  }

  get _authorizedSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuthorizedSignerCall__Outputs {
  _call: SetAuthorizedSignerCall;

  constructor(call: SetAuthorizedSignerCall) {
    this._call = call;
  }
}

export class SetDungeonAdventureAddressCall extends ethereum.Call {
  get inputs(): SetDungeonAdventureAddressCall__Inputs {
    return new SetDungeonAdventureAddressCall__Inputs(this);
  }

  get outputs(): SetDungeonAdventureAddressCall__Outputs {
    return new SetDungeonAdventureAddressCall__Outputs(this);
  }
}

export class SetDungeonAdventureAddressCall__Inputs {
  _call: SetDungeonAdventureAddressCall;

  constructor(call: SetDungeonAdventureAddressCall) {
    this._call = call;
  }

  get _dungeonAdventureAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDungeonAdventureAddressCall__Outputs {
  _call: SetDungeonAdventureAddressCall;

  constructor(call: SetDungeonAdventureAddressCall) {
    this._call = call;
  }
}

export class SetGameTreasuryAddressCall extends ethereum.Call {
  get inputs(): SetGameTreasuryAddressCall__Inputs {
    return new SetGameTreasuryAddressCall__Inputs(this);
  }

  get outputs(): SetGameTreasuryAddressCall__Outputs {
    return new SetGameTreasuryAddressCall__Outputs(this);
  }
}

export class SetGameTreasuryAddressCall__Inputs {
  _call: SetGameTreasuryAddressCall;

  constructor(call: SetGameTreasuryAddressCall) {
    this._call = call;
  }

  get _gameTreasuryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGameTreasuryAddressCall__Outputs {
  _call: SetGameTreasuryAddressCall;

  constructor(call: SetGameTreasuryAddressCall) {
    this._call = call;
  }
}

export class SetPaymentTokenCall extends ethereum.Call {
  get inputs(): SetPaymentTokenCall__Inputs {
    return new SetPaymentTokenCall__Inputs(this);
  }

  get outputs(): SetPaymentTokenCall__Outputs {
    return new SetPaymentTokenCall__Outputs(this);
  }
}

export class SetPaymentTokenCall__Inputs {
  _call: SetPaymentTokenCall;

  constructor(call: SetPaymentTokenCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPaymentTokenCall__Outputs {
  _call: SetPaymentTokenCall;

  constructor(call: SetPaymentTokenCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateExperienceCall extends ethereum.Call {
  get inputs(): UpdateExperienceCall__Inputs {
    return new UpdateExperienceCall__Inputs(this);
  }

  get outputs(): UpdateExperienceCall__Outputs {
    return new UpdateExperienceCall__Outputs(this);
  }
}

export class UpdateExperienceCall__Inputs {
  _call: UpdateExperienceCall;

  constructor(call: UpdateExperienceCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get additionalExperience(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newSlots(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UpdateExperienceCall__Outputs {
  _call: UpdateExperienceCall;

  constructor(call: UpdateExperienceCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
